buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}


apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

class LicenseReport extends DefaultTask {
    String githubProject

    String dockerImage


    @TaskAction
    void generateReport() {
        println "##########"
        println "# Generate Licenses Report for ${githubProject} (with ${dockerImage})!"
        println "##########"

        // Run the Docker container to generate the report

    }
}

/*
*
* Go Licenses report
*
*/

/* Build image with go binaries to check Go dependencies licences files */
task buildGoImage(type: DockerBuildImage) {

    inputDir = file("go")
    tag = 'mgreau/go-licenses-report:1.0'
}

task createGoContainer(type: DockerCreateContainer) {
    dependsOn buildGoImage
    targetImageId { buildGoImage.getImageId() }
    binds = ["${project.ext.checkoutDir}/${project.ext.goProject}":'/home/golang/project', "${rootProject.projectDir.path}/build/${project.ext.goProject}":'/home/golang/reports']
    cmd = [ "--project", "${project.ext.goProject}" ,  "--path",  "/home/golang/project/vendor", "--output",  "/home/golang/reports", "generate"]
}

task startGoContainer(type: DockerStartContainer) {
    dependsOn createGoContainer
    targetContainerId { createGoContainer.getContainerId() }

}

task stopGoContainer(type: DockerStopContainer) {
    targetContainerId { createGoContainer.getContainerId() }
}

task showGoHeaders(type : LicenseReport) {
    githubProject = project.ext.goProject
    dockerImage = buildGoImage.tag
}

task logGoContainer(type: DockerLogsContainer) {
    dependsOn startGoContainer
    dependsOn showGoHeaders
    targetContainerId { startGoContainer.getContainerId() }
    follow = true
    tailAll = true
    sink = project.file("${rootProject.projectDir.path}/build/${project.ext.goProject}-comtainer.log").newWriter()

}




/*
*
* JS Licenses report
*
*/

/* Build image with JS plugin to check JS dependencies licences files */
task buildNodeImage(type: DockerBuildImage) {

    inputDir = file("node")
    tag = 'mgreau/node-licenses-report:1.0'
}

task createNodeContainer(type: DockerCreateContainer) {
    dependsOn buildNodeImage
    targetImageId { buildNodeImage.getImageId() }
    binds = ["${project.ext.checkoutDir}/${project.ext.jsProject}":'/home/node/project', "${rootProject.projectDir.path}/build/${project.ext.jsProject}":'/home/node/reports']
}

task startNodeContainer(type: DockerStartContainer) {
    dependsOn createNodeContainer
    targetContainerId { createNodeContainer.getContainerId() }

}

task stopNodeContainer(type: DockerStopContainer) {
    targetContainerId { createNodeContainer.getContainerId() }
}

task showNodeHeaders(type : LicenseReport) {
    githubProject = project.ext.jsProject
    dockerImage = buildNodeImage.tag
}

task logNodeContainer(type: DockerLogsContainer) {
    dependsOn startNodeContainer
    dependsOn showNodeHeaders
    targetContainerId { startNodeContainer.getContainerId() }
    follow = true
    tailAll = true
    sink = project.file("${projectDir.path}/../build/${project.ext.jsProject}-container.log").newWriter()

}

/*
*
* Gradle Licenses report
*
*/

/* Build image with Gradle plugin to check Java dependencies licences files */
task buildGradleReportImage(type: DockerBuildImage) {

    inputDir = file("java")
    tag = 'mgreau/gradle-licenses-report:1.0'
}

task createGradleContainer(type: DockerCreateContainer) {
    dependsOn buildGradleReportImage
    targetImageId { buildGradleReportImage.getImageId() }
    binds = ["${rootProject.ext.checkoutDir}/${rootProject.ext.javaProject}":'/home/gradle/project',
             "${rootProject.projectDir.path}/build/${rootProject.ext.javaProject}":'/home/gradle/project/build/reports/license',
             "${System.env.HOME}/.gradle":'/home/grale/.gradle']
}

task startGradleContainer(type: DockerStartContainer) {
    dependsOn createGradleContainer
    targetContainerId { createGradleContainer.getContainerId() }

}

task stopGradleContainer(type: DockerStopContainer) {
    targetContainerId { createGradleContainer.getContainerId() }
}

task showGradleHeaders(type : LicenseReport) {
    githubProject = project.ext.javaProject
    dockerImage = buildGradleReportImage.tag
}

task logGradleContainer(type: DockerLogsContainer) {
    dependsOn startGradleContainer
    dependsOn showGradleHeaders
    targetContainerId { startGradleContainer.getContainerId() }
    follow = true
    tailAll = true
    sink = project.file("${rootProject.projectDir.path}/build/${project.ext.javaProject}-container.log").newWriter()

}

